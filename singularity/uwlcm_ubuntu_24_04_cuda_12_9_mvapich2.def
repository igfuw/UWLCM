Bootstrap: docker
From: nvidia/cuda:12.9.0-devel-ubuntu24.04

%post
export DEBIAN_FRONTEND=noninteractive
export TZ=America/Los_Angeles
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Minimal setup + key packages
apt-get update -qq && apt-get install -yq --no-install-recommends \
    sudo \
    cmake \
    build-essential \
    pkg-config \
    git \
    ca-certificates \
    vim \
    curl \
    gdb \
    gfortran \
    libnetcdf-dev \
    libnetcdff-dev \
    wget \
    gnuplot-nox \
    libgnuplot-iostream-dev \
    hdf5-tools \
    python3-dev \
    python3-h5py \
    python3-numpy \
    python3-scipy \
    python3-matplotlib \
    python3-pytest \
    python3-cffi \
    python3-tk \
    dvipng \
    libthrust-dev \
    nco \
    locales \
    xz-utils \
    unzip \
    software-properties-common \
    bison # for yacc


# Set up locale
locale-gen en_US.UTF-8
update-locale LANG=en_US.UTF-8

# OPTIONAL: only if you must have texlive
# Consider using a minimal texlive bundle or installing just what you need
# apt-get install -y --no-install-recommends texlive-latex-base

# Build blitz
git clone --depth=1 https://github.com/blitzpp/blitz.git
cd blitz
mkdir build && cd build
cmake .. -DCMAKE_INSTALL_PREFIX=/usr
make -j$(nproc)
make install
cd ../..
rm -rf blitz

# Install python-gnuplot deb
wget http://ftp.pl.debian.org/debian/pool/main/p/python-gnuplot/python3-gnuplot_1.8-8_all.deb
apt install -y ./python3-gnuplot_1.8-8_all.deb
rm python3-gnuplot_1.8-8_all.deb


# MPI - mvapich2-2.3.6
#export CXX=g++
#export CXX=gcc
wget http://mvapich.cse.ohio-state.edu/download/mvapich/mv2/mvapich2-2.3.6.tar.gz
tar xf mvapich2-2.3.6.tar.gz
cd mvapich2-2.3.6
./configure --disable-fortran --enable-cxx --enable-threads=multiple --with-device=ch3:sock CC=gcc CXX=g++
make -j4
make install
cd ..

export CXX=mpic++
export CC=mpicc

# Boost with Boost.MPI, boost installation based on https://github.com/boostorg/compute/blob/master/.travis.yml
wget https://archives.boost.io/release/1.88.0/source/boost_1_88_0.tar.gz 
tar xf boost_1_88_0.tar.gz
cd boost_1_88_0
# configure and install
#echo "using gcc : 5.4 : g++ ;" > $HOME/user-config.jam
echo "using python : 3.12 : /usr/bin/python3 ;" >> $HOME/user-config.jam
echo "using mpi : /usr/local/bin/mpicc ;" >> $HOME/user-config.jam
#echo "using mpi ;" >> $HOME/user-config.jam
cat $HOME/user-config.jam
./bootstrap.sh --with-libraries=chrono,regex,serialization,mpi,atomic,thread,date_time,system,iostreams,timer,filesystem,program_options,python
./b2 -d0 install
cd ..

# HDF5 with MPI
wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.1/src/hdf5-1.12.1.tar.gz
tar xf hdf5-1.12.1.tar.gz
cd hdf5-1.12.1
CXXFLAGS=-w CFLAGS=-w ./configure --enable-parallel --enable-cxx --enable-unsupported --enable-threadsafe --prefix=/usr/local
make -j4 || cat config.log
make install

# Install odeint thrust v2 fix (and clean up after)
git clone -b Thrust_2 --depth=1 https://github.com/pdziekan/odeint.git
cp -r odeint/include/boost/numeric/odeint/* /usr/local/include/boost/numeric/odeint/
rm -rf odeint

# Final cleanup
apt-get clean
